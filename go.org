#+TITLE: Go
#+FILETAGS: :go:

* Standard tools
** build
~go build -i~ makes subsequent builds faster by installing packages that are
dependencies of the target.

** test
~go test -i~ makes running subsequent ~go test~ invocations faster by
installing packages that are dependencies of the test.

~-bench regexp~ - run only benchmarks matching the regexp (use regexp=. for all)

~-run regexp~ - run only tests matching the regexp

* Built-in types
** slice
*** clearing slice
#+BEGIN_SRC go
  s = s[:0]
#+END_SRC

Note: this might lead to memory leaks if slice holds pointers (including
interfaces, maps, etc).

* Standard Library
** builtin (builtin.go)
- primitive types
- append/copy (for slice)
- delete (from map)
- len/cap (for array, slice, map)
- make/new
- close (channel)
- panic/recover
- print/println (for debugging, not guaranteed to stay in the language)
- error interface

** errors (errors.go)
- errors.New(string)

** io (io.go, multi.go, pipe.go)
*** interfaces
- Reader/Writer/Closer/Seeker and their combinations (e.g. ReadWriteSeeker)
- ReaderFrom/WriterTo
- ReaderAt/WriterAt
- ByteReader/ByteScanner/ByteWriter
- RuneReader/RuneScanner
*** function
- Read/Write/Copy, etc
- MultiReader/MultiWriter
- Pipe

*** notes
- struct SectionReader exported because it implements several interfaces
- os.Open opens files in read-only mode by default

** ioutil (io/ioutil/{ioutil.go, tempfile.go})
- ReadAll/ReadFile/WriteFile
- ReadDir
- Discard
- TempFile, TempDir

** expvar (expvar.go)
- expose int, float, map via HTTP JSON rest call
- "simplified JMX"

** testing
*** Example
ExampleXXX functions
- with "Output:" comment are executed and output is compared
- without "Output:" comment are compiled

** binary (encoding/binary/{varint.go, binary.go})
- encoding/decoding unsigned integers using little-endian or big-endian byte order
- binary.Size - size of fixed-sized value (e.g. slice of structs with int fields)
- Read/Write methods for slices and structs (reflection based)
- varint encoding (ULEB-128 for unsigned, signed mapped to unsigned using zig-zag encoding)
** text/template

To access a variable from the outer scope inside range use =$.outerScope=
syntax.
